package demo.everything.exception;

import java.util.Arrays;

public class Test9 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		byte[] bytes ={1, 22, 104, 62, 0, 62, 0, 104, 0, -79, 0, 1, 0, 0, 12, 96, 1, 1, 1, 22, 5, 3, 6, 7, 6, 0, 7, 0, 8, 12, 6, 18, 8, 20, 2, 9, 3, 6, 12, 5, 9, 4, 26, 8, 3, 24, 5, 8, 4, 2, 7, 13, 6, 2, 6, 8, 3, 7, 12, 9, 33, 7, 3, 5, 1, 2, 3, 4, 0, 1, 1, 22, 104, 32, 0, 32, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 5, 12, 36, 10, 11, 10, 15, 0, 10, 5, 100, 0, 80, 0, 0, 1, 43, 22, 104, 46, 0, 46, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 5, 0, 16, 23, 9, 15, 60, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 1, 43, 22, 104, 70, 0, 70, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 9, 24, 59, 12, 11, 10, 15, 0, 11, 87, 0, 100, 0, 50, 0, 70, 0, 40, 0, 60, 0, 80, 0, 0, 0, -16, 10, 24, 58, 15, 9, 10, 15, 0, 8, 87, 0, 15, 0, 25, 0, 35, 0, 20, 0, 40, 0, 60, 0, 0, 0, 120, 0, 1, 43, 22, 104, 25, 0, 25, 0, 104, 0, -71, 0, 1, 0, 0, 12, 96, 1, 1, 1, 23, 3, 32, 8, 33, 7, 1, 6, 0, 10, 0, 20, 0, 1, 1, 22, 104, 32, 0, 32, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 5, 12, 36, 10, 11, 10, 15, 0, 10, 5, 100, 0, 80, 0, 0, 1, 43, 22, 104, 25, 0, 25, 0, 104, 0, 33, 0, 23, 0, 0, 12, 96, 3, 1, 2, 0, 0, 0, 8, 26, 84, 15, 3, 1, 4, 0, 3, 0, 1, 1, 22, 104, 46, 0, 46, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 5, 0, 16, 23, 9, 15, 60, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 1, 43, 22, 104, 25, 0, 25, 0, 104, 0, -71, 0, 1, 0, 0, 12, 96, 1, 1, 1, 23, 3, 32, 8, 33, 7, 1, 6, 0, 10, 0, 20, 0, 1, 1, 22, 104, 96, 0, 96, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 1, 15, 11, 26, 8, 15, 0, 19, 0, 110, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 18, 0, 19, 0, 15, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 1, 43, 22, 104, 70, 0, 70, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 9, 24, 59, 12, 11, 10, 15, 0, 11, 87, 0, 100, 0, 50, 0, 70, 0, 40, 0, 60, 0, 80, 0, 0, 0, -16, 10, 24, 58, 15, 9, 10, 15, 0, 8, 87, 0, 15, 0, 25, 0, 35, 0, 20, 0, 40, 0, 60, 0, 0, 0, 120, 0, 1, 43, 22, 104, 25, 0, 25, 0, 104, 0, -71, 0, 1, 0, 0, 12, 96, 1, 1, 1, 23, 3, 32, 8, 33, 7, 1, 6, 0, 10, 0, 20, 0, 1, 1, 22, 104, 70, 0, 70, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 9, 24, 59, 12, 11, 10, 15, 0, 11, 87, 0, 100, 0, 50, 0, 70, 0, 40, 0, 60, 0, 80, 0, 0, 0, -16, 10, 24, 58, 15, 9, 10, 15, 0, 8, 87, 0, 15, 0, 25, 0, 35, 0, 20, 0, 40, 0, 60, 0, 0, 0, 120, 0, 1, 43, 22, 104, 46, 0, 46, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 5, 0, 16, 23, 9, 15, 60, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 1, 43, 22, 104, 70, 0, 70, 0, 104, -128, 19, 0, 23, 0, 0, 14, 96, 0, 1, 1, 0, 0, 2, 1, 3, 9, 24, 59, 12, 11, 10, 15, 0, 11, 87, 0, 100, 0, 50, 0, 70, 0, 40, 0, 60, 0, 80, 0, 0, 0, -16, 10, 24, 58, 15, 9, 10, 15, 0, 8, 87, 0, 15, 0, 25, 0, 35, 0, 20, 0, 40, 0, 60, 0, 0, 0, 120, 0, 1, 43, 22, 104, 46, 0, 46, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 5, 0, 16, 23, 9, 15, 60, 0, 0, 0, 10, 0, 0, 0, 5, 0, 0, 0, 15, 0, 0, 0, 4, 0, 0, 0, 16, 0, 0, 0, 10, 0, 0, 0, 0, 1, 43, 22, 104, 96, 0, 96, 0, 104, -128, 19, 0, 23, 0, 0, 13, 96, 0, 1, 1, 15, 11, 26, 8, 15, 0, 19, 0, 110, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 5, 0, 6, 0, 18, 0, 19, 0, 15, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 7, 0, 8, 0, 1, 43, 22, 104, 25, 0, 25};
		System.out.println(getNextMessageStartLocation(bytes));
	}

	public static int getNextMessageStartLocation(byte[] array) {
		// TODO Auto-generated method stub
		int result = 0;
		
		byte flag1 = 0x22;
		byte flag2 = 0x68;

		IteratorDIY it = new IteratorDIY(array);
		while (it.doAgain()) {
			int location1 =Arrays.binarySearch(array, flag1);
			int location2 = Arrays.binarySearch(array, flag2);
			if (location1+1==location2 && array[location2+5]==0x68 && array[location2+1]==array[location2+3] && array[location2+2]==array[location2+4]) {
				result = location2;
				it.setFlag(false);
				break;
			}
			array = it.nextArray(location2);
		}
		
		return result;
	}
	
}

class IteratorDIY{
	private boolean flag;
	private byte[] bytes;
	
	public IteratorDIY(byte[] array) {
		bytes = array;
	}
	
	public byte[] nextArray(int start){
		bytes = Arrays.copyOfRange(bytes, start, bytes.length);
		return bytes;
	}
	
	public boolean doAgain(){
		return flag;
	}
	
	public void setFlag(boolean pram){
		flag = pram;
	}
} 
